{"version":3,"file":"jupita-sdk.esm.js","sources":["../src/common/enums/jupita-endpoint.enum.ts","../src/common/enums/message-type.enum.ts","../src/core/jupita.ts","../src/common/enums/model-name.enum.ts"],"sourcesContent":["export enum JupitaEndpoint {\n  dump = `https://api.jupita.io/v1/dump`,\n}\n","export enum MessageType {\n    Touchpoint = 0,\n    Input = 1\n}\n","import request from 'request';\n\nimport { JupitaEndpoint } from '../common/enums/jupita-endpoint.enum';\nimport { MessageType } from '../common/enums/message-type.enum';\n// import { InvalidParameterException } from '../common/exceptions/invalid-parameter.exception';\n\nexport class Jupita {\n\n    private readonly token: string;\n    private readonly touchpointId: string;\n\n    constructor(token: string, touchpointId: string) {\n        this.token = token;\n        this.touchpointId = touchpointId;\n    };\n\n    public dump(\n      text: string,\n      inputId: number,\n      messageType: number = MessageType.Touchpoint,  \n      isCall: boolean = false,\n      listener?: Listener\n    ) {\n        // if (messageType !== MessageType.Input) {\n        //     throw new InvalidParameterException(`invalid input`)\n        // }\n\n        this.request(\n          JupitaEndpoint.dump,\n          {\n              token: this.token,\n              touchpoint_id: this.touchpointId,\n              input_id: inputId,\n              message_type: messageType,\n              text,\n              isCall\n          },\n          listener\n        );\n    }\n\n    private request(url: string, options: any, listener?: Listener): void {\n        request.post(url, {\n            json: options,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        }, (err, res, body) => {\n            if(!listener) {\n              return console.log('No listener supplied');\n            }\n\n            if(err || res.statusCode !== 200){\n                listener.onError(res.statusCode.toString(), res.body)\n            } else {\n                listener.onSuccess(body)\n            }\n        })\n    }\n\n}\n","export enum ModelName {\n    JUPITAV1 = \"JupitaV1\",\n    JUPITAV2 = \"JupitaV2\",\n}\n"],"names":["JupitaEndpoint","MessageType","Jupita","token","touchpointId","dump","text","inputId","messageType","isCall","listener","Touchpoint","request","touchpoint_id","input_id","message_type","url","options","post","json","headers","err","res","body","console","log","statusCode","onError","toString","onSuccess","ModelName"],"mappings":";;AAAA,IAAYA,cAAZ;;AAAA,WAAYA;AACVA,EAAAA,sBAAA,kCAAA;AACD,CAFD,EAAYA,cAAc,KAAdA,cAAc,KAAA,CAA1B;;ICAYC,WAAZ;;AAAA,WAAYA;AACRA,EAAAA,0CAAA,eAAA;AACAA,EAAAA,qCAAA,UAAA;AACH,CAHD,EAAYA,WAAW,KAAXA,WAAW,KAAA,CAAvB;;ICMaC,MAAb;AAKI,kBAAYC,KAAZ,EAA2BC,YAA3B;AACI,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACH;;AARL;;AAAA,SAUWC,IAVX,GAUW,cACLC,IADK,EAELC,OAFK,EAGLC,WAHK,EAILC,MAJK,EAKLC,QALK;QAGLF;AAAAA,MAAAA,cAAsBP,WAAW,CAACU;;;QAClCF;AAAAA,MAAAA,SAAkB;;;AAGhB;AACA;AACA;AAEA,SAAKG,OAAL,CACEZ,cAAc,CAACK,IADjB,EAEE;AACIF,MAAAA,KAAK,EAAE,KAAKA,KADhB;AAEIU,MAAAA,aAAa,EAAE,KAAKT,YAFxB;AAGIU,MAAAA,QAAQ,EAAEP,OAHd;AAIIQ,MAAAA,YAAY,EAAEP,WAJlB;AAKIF,MAAAA,IAAI,EAAJA,IALJ;AAMIG,MAAAA,MAAM,EAANA;AANJ,KAFF,EAUEC,QAVF;AAYH,GAjCL;;AAAA,SAmCYE,OAnCZ,GAmCY,iBAAQI,GAAR,EAAqBC,OAArB,EAAmCP,QAAnC;AACJE,IAAAA,QAAO,CAACM,IAAR,CAAaF,GAAb,EAAkB;AACdG,MAAAA,IAAI,EAAEF,OADQ;AAEdG,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAFK,KAAlB,EAKG,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX;AACC,UAAG,CAACb,QAAJ,EAAc;AACZ,eAAOc,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAP;AACD;;AAED,UAAGJ,GAAG,IAAIC,GAAG,CAACI,UAAJ,KAAmB,GAA7B,EAAiC;AAC7BhB,QAAAA,QAAQ,CAACiB,OAAT,CAAiBL,GAAG,CAACI,UAAJ,CAAeE,QAAf,EAAjB,EAA4CN,GAAG,CAACC,IAAhD;AACH,OAFD,MAEO;AACHb,QAAAA,QAAQ,CAACmB,SAAT,CAAmBN,IAAnB;AACH;AACJ,KAfD;AAgBH,GApDL;;AAAA;AAAA;;ICNYO,SAAZ;;AAAA,WAAYA;AACRA,EAAAA,qBAAA,aAAA;AACAA,EAAAA,qBAAA,aAAA;AACH,CAHD,EAAYA,SAAS,KAATA,SAAS,KAAA,CAArB;;;;"}