{"version":3,"file":"jupita-sdk.cjs.production.min.js","sources":["../src/common/enums/jupita-endpoint.enum.ts","../src/common/enums/message-type.enum.ts","../src/common/enums/model-name.enum.ts","../src/core/jupita.ts"],"sourcesContent":["export enum JupitaEndpoint {\n  dump = `https://api.jupita.io/v1/dump`,\n}\n","export enum MessageType {\n    Touchpoint = 0,\n    Input = 1\n}\n","export enum ModelName {\n    JUPITAV1 = \"JupitaV1\",\n    JUPITAV2 = \"JupitaV2\",\n}\n","import request from 'request';\n\nimport { JupitaEndpoint } from '../common/enums/jupita-endpoint.enum';\nimport { MessageType } from '../common/enums/message-type.enum';\n// import { InvalidParameterException } from '../common/exceptions/invalid-parameter.exception';\n\nexport class Jupita {\n\n    private readonly token: string;\n    private readonly touchpointId: string;\n\n    constructor(token: string, touchpointId: string) {\n        this.token = token;\n        this.touchpointId = touchpointId;\n    };\n\n    public dump(\n      text: string,\n      inputId: number,\n      messageType: number = MessageType.Touchpoint,  \n      isCall: boolean = false,\n      listener?: Listener\n    ) {\n        // if (messageType !== MessageType.Input) {\n        //     throw new InvalidParameterException(`invalid input`)\n        // }\n\n        this.request(\n          JupitaEndpoint.dump,\n          {\n              token: this.token,\n              touchpoint_id: this.touchpointId,\n              input_id: inputId,\n              message_type: messageType,\n              text,\n              isCall\n          },\n          listener\n        );\n    }\n\n    private request(url: string, options: any, listener?: Listener): void {\n        request.post(url, {\n            json: options,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        }, (err, res, body) => {\n            if(!listener) {\n              return console.log('No listener supplied');\n            }\n\n            if(err || res.statusCode !== 200){\n                listener.onError(res.statusCode.toString(), res.body)\n            } else {\n                listener.onSuccess(body)\n            }\n        })\n    }\n\n}\n"],"names":["JupitaEndpoint","MessageType","ModelName","Jupita","token","touchpointId","dump","text","inputId","messageType","isCall","listener","Touchpoint","request","this","touchpoint_id","input_id","message_type","url","options","post","json","headers","err","res","body","console","log","statusCode","onError","toString","onSuccess"],"mappings":"0EAAYA,ECAAC,2EDAZ,SAAYD,GACVA,uCADF,CAAYA,IAAAA,QCAAC,EAAAA,sBAAAA,sDAERA,yBCFQC,ECMCC,wBAKGC,EAAeC,QAClBD,MAAQA,OACRC,aAAeA,6BAGjBC,KAAA,SACLC,EACAC,EACAC,EACAC,EACAC,YAFAF,IAAAA,EAAsBR,oBAAYW,qBAClCF,IAAAA,GAAkB,QAOXG,QACHb,EAAeM,KACf,CACIF,MAAOU,KAAKV,MACZW,cAAeD,KAAKT,aACpBW,SAAUR,EACVS,aAAcR,EACdF,KAAAA,EACAG,OAAAA,GAEJC,MAIEE,QAAA,SAAQK,EAAaC,EAAcR,GACvCE,EAAQO,KAAKF,EAAK,CACdG,KAAMF,EACNG,QAAS,gBACW,sBAErB,SAACC,EAAKC,EAAKC,OACNd,SACKe,QAAQC,IAAI,wBAGlBJ,GAA0B,MAAnBC,EAAII,WACVjB,EAASkB,QAAQL,EAAII,WAAWE,WAAYN,EAAIC,MAEhDd,EAASoB,UAAUN,aDvDvBvB,EAAAA,oBAAAA,2CAERA"}