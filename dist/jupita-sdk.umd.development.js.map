{"version":3,"file":"jupita-sdk.umd.development.js","sources":["../src/common/enums/jupita-endpoint.enum.ts","../src/common/enums/message-type.enum.ts","../src/core/jupita.ts","../src/common/enums/model-name.enum.ts"],"sourcesContent":["export enum JupitaEndpoint {\n  dump = `https://api.jupita.io/v1/dump`,\n}\n","export enum MessageType {\n    Touchpoint = 0,\n    Input = 1\n}\n","import request from 'request';\n\nimport { JupitaEndpoint } from '../common/enums/jupita-endpoint.enum';\nimport { MessageType } from '../common/enums/message-type.enum';\n// import { InvalidParameterException } from '../common/exceptions/invalid-parameter.exception';\n\nexport class Jupita {\n\n    private readonly token: string;\n    private readonly touchpointId: string;\n\n    constructor(token: string, touchpointId: string) {\n        this.token = token;\n        this.touchpointId = touchpointId;\n    };\n\n    public dump(\n      text: string,\n      inputId: number,\n      messageType: number = MessageType.Touchpoint,  \n      isCall: boolean = false,\n      listener?: Listener\n    ) {\n        // if (messageType !== MessageType.Input) {\n        //     throw new InvalidParameterException(`invalid input`)\n        // }\n\n        this.request(\n          JupitaEndpoint.dump,\n          {\n              token: this.token,\n              touchpoint_id: this.touchpointId,\n              input_id: inputId,\n              message_type: messageType,\n              text,\n              isCall\n          },\n          listener\n        );\n    }\n\n    private request(url: string, options: any, listener?: Listener): void {\n        request.post(url, {\n            json: options,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        }, (err, res, body) => {\n            if(!listener) {\n              return console.log('No listener supplied');\n            }\n\n            if(err || res.statusCode !== 200){\n                listener.onError(res.statusCode.toString(), res.body)\n            } else {\n                listener.onSuccess(body)\n            }\n        })\n    }\n\n}\n","export enum ModelName {\n    JUPITAV1 = \"JupitaV1\",\n    JUPITAV2 = \"JupitaV2\",\n}\n"],"names":["JupitaEndpoint","MessageType","Jupita","token","touchpointId","dump","text","inputId","messageType","isCall","listener","Touchpoint","request","touchpoint_id","input_id","message_type","url","options","post","json","headers","err","res","body","console","log","statusCode","onError","toString","onSuccess","ModelName"],"mappings":";;;;;;;;EAAA,IAAYA,cAAZ;;EAAA,WAAYA;EACVA,EAAAA,sBAAA,kCAAA;EACD,CAFD,EAAYA,cAAc,KAAdA,cAAc,KAAA,CAA1B;;ECAA,WAAYC;EACRA,EAAAA,0CAAA,eAAA;EACAA,EAAAA,qCAAA,UAAA;EACH,CAHD,EAAYA,mBAAW,KAAXA,mBAAW,KAAA,CAAvB;;MCMaC,MAAb;EAKI,kBAAYC,KAAZ,EAA2BC,YAA3B;EACI,SAAKD,KAAL,GAAaA,KAAb;EACA,SAAKC,YAAL,GAAoBA,YAApB;EACH;;EARL;;EAAA,SAUWC,IAVX,GAUW,cACLC,IADK,EAELC,OAFK,EAGLC,WAHK,EAILC,MAJK,EAKLC,QALK;UAGLF;EAAAA,MAAAA,cAAsBP,mBAAW,CAACU;;;UAClCF;EAAAA,MAAAA,SAAkB;;;EAGhB;EACA;EACA;EAEA,SAAKG,OAAL,CACEZ,cAAc,CAACK,IADjB,EAEE;EACIF,MAAAA,KAAK,EAAE,KAAKA,KADhB;EAEIU,MAAAA,aAAa,EAAE,KAAKT,YAFxB;EAGIU,MAAAA,QAAQ,EAAEP,OAHd;EAIIQ,MAAAA,YAAY,EAAEP,WAJlB;EAKIF,MAAAA,IAAI,EAAJA,IALJ;EAMIG,MAAAA,MAAM,EAANA;EANJ,KAFF,EAUEC,QAVF;EAYH,GAjCL;;EAAA,SAmCYE,OAnCZ,GAmCY,iBAAQI,GAAR,EAAqBC,OAArB,EAAmCP,QAAnC;EACJE,IAAAA,QAAO,CAACM,IAAR,CAAaF,GAAb,EAAkB;EACdG,MAAAA,IAAI,EAAEF,OADQ;EAEdG,MAAAA,OAAO,EAAE;EACL,wBAAgB;EADX;EAFK,KAAlB,EAKG,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX;EACC,UAAG,CAACb,QAAJ,EAAc;EACZ,eAAOc,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAP;EACD;;EAED,UAAGJ,GAAG,IAAIC,GAAG,CAACI,UAAJ,KAAmB,GAA7B,EAAiC;EAC7BhB,QAAAA,QAAQ,CAACiB,OAAT,CAAiBL,GAAG,CAACI,UAAJ,CAAeE,QAAf,EAAjB,EAA4CN,GAAG,CAACC,IAAhD;EACH,OAFD,MAEO;EACHb,QAAAA,QAAQ,CAACmB,SAAT,CAAmBN,IAAnB;EACH;EACJ,KAfD;EAgBH,GApDL;;EAAA;EAAA;;ECNA,WAAYO;EACRA,EAAAA,qBAAA,aAAA;EACAA,EAAAA,qBAAA,aAAA;EACH,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;;;;;;;;;;;"}